<!DOCTYPE HTML>
<!--
	Striped by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
-->
		<!--  © Copyright 2016, Denise Irvin. -->
<!--
    I cut up the template quite a bit, and made it simpler. -Denise
-->
<html>
	<head>
		<title>Script Kiddie Starter Kit</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<!--[if lte IE 8]><script src="../static/assets/js/ie/html5shiv.js"></script><![endif]-->
		<link rel="stylesheet" href="../static/assets/css/main.css" />
		<!--[if lte IE 8]><link rel="stylesheet" href="../static/assets/css/ie8.css" /><![endif]-->
	</head>
	<body>

		<!-- Content -->
			<div id="content">
				<div class="inner">

					<!-- Post -->
						<article class="box post post-excerpt">
							<header>
								<h2><a href="#">Friendly Intro</a></h2>
								<p>Welcome to scripting.</p>
							</header>

                            <h3><strong>What is scripting?</strong></h3>
                            <p>
								A script is a program that does not need to be compiled. Computers understand ones and zeroes, but most
                                people would rather not code in somthing ridiculous like that. So people write compilers and interpreters,
                                which are programs that take in a program written in a program language (like Java, C++, Python) and turn
                                it in to machine code to run. Compilers translate the whole program one at once, but with interpretation
                                a part of the program is translated, that code is executed by the computer, and another part is interptreted
                                and ran. Which is better? Like most things, it depends what you want. This website deals with short programs
                                that call operating system commands. I chose Python, because it has good modules for this sort of thing. But
                                trust me you could write things that do these thing in other languages.
                            </p>

                            <h3><strong>Some things you should know about Python.</strong></h3>
                            <p>
                                Python is a scripting (interpreted) language that came out of the late, late eighties. It is famous for 1)
                                having modules for "everything" and 2) being programmer friendly. A python module is like a package- it contains
                                pre-written functions and/or classes and/or statements that can be called by programs that import them. I won't
                                go too in depth (there are a lot of blogs about this already) but I will give you an example. In Python, there is
                                a module called time. It contains many things, including a function called sleep, which will cause your program to
                                wait the number of seconds passed to it (the numbers in the parenthesis. If your python environment has
                                Time installed, you can write a program like:
                                <pre class="code-snippit">import time<br>Time.sleep(5)</pre>
                                <br>
                                This will cause the system to wait 5 seconds. Five is called a parameter, which is a piece of information passed to
                                the function. Some functions will have more than one parameter, some functions won't have any. Multiple parameters
                                are separated by commas. How many parameters a function takes is defined when the function is defined. If you want
                                to learn python syntax, you should check out <a href="codecademy.com">codecademy.com</a> (its free!). It has a good course for syntax, which is
                                a good thing to have a background. The scripts on this site do not define functions because they are trivial,
                                single purpose scripts. But we will call functions from other modules.

                            </p>

                            <h3><strong>Getting a Python Interpreter.</strong></h3>
                            <p>
                                If you have a mac, get hyped, because it comes pre-installed with a Python Interpreter (version 2.7, I believe). To find out
                                what version of Python you have, you can type "python --version" into your command prompt. If you want to know
                                where on your system Python is, you can type "which python". If you have windows, you get to install it! Whew!
                                It's really not that hard, just go to <a href ="python.org/downloads">python.org/downloads</a> and follow the instructions. Once you do that, you
                                should add Python to your path (which is an environment variable). I am not talking about PYTHONPATH. If you open
                                a commandline and type in "echo %PATH%", you will get a list of paths your system does not need a full path for-
                                instead of having to type "c\your\path\to\python", you can just type "python". Which is really, really nice.
                                <!-- TODO  Explain how to add pytohn to path-->
                            <br>
                            <br>
                                Once you have the python interpreter on your computer, you can run python scripts no problem. In windows you can run
                                a script by double clicking on it or calling it from the command line. There are more interesting ways to run a script
                                though. You can set up your computer to run a script at certain times, on a timer, on startup, on Thursdays, whatever.
                                In Windows, you can do this with the built in Task Scheduler program.

                            </p>
                            <h3><strong>More things.</strong></h3>
                            <p>
                                These are the big "gotchas" that I remember from learning to program. Most problems you run into can be researched
                                quite easily with a google search. If you have any comments or suggests, or criticism to make the site better, email
                                me at scriptkiddiestarterkit@gmail.com.
                            </p>

                        </article>


					<!-- Post -->


				</div>
			</div>

		<!-- Sidebar -->
			<div id="sidebar">

				<!-- Logo -->
					<h1 id="logo"><a href="#">Script <br>Kiddie <br>Starter <br>Kit.com</a></h1>

				<!-- Nav -->
					<nav id="nav">
						<ul>
							<li><a href="index">Home Page</a></li>
							<li class="current"><a href="friendlyintro">Friendly Intro</a></li>
							<li><a href="desktopbackground">Desktop Background</a></li>
							<!--<li><a href="cddriveandhardware">CD Drive & Hardware</a></li>-->
							<li><a href="openprograms">Open Programs</a></li>
							<li><a href="shutdown">Shutdown</a></li>
						</ul>
					</nav>

				<!-- Text -->
					<section class="box text-style1">
						<div class="inner">
							<p>
								<strong>Licensing:</strong> All code on the website is under <a href="http://www.freebsd.org/copyright/freebsd-license.html">FreeBSD Copyright</a>
							</p>
						</div>
					</section>

				<!-- Copyright -->
					<ul id="copyright">
						<li>&copy; 2016, Denise Irvin.</li><li>Design: <a href="http://html5up.net">HTML5 UP</a></li>
					</ul>

			</div>

		<!-- Scripts -->
			<script src="assets/js/jquery.min.js"></script>
			<script src="assets/js/skel.min.js"></script>
			<script src="assets/js/util.js"></script>
			<!--[if lte IE 8]><script src="assets/js/ie/respond.min.js"></script><![endif]-->
			<script src="assets/js/main.js"></script>

	</body>
</html>
		<!--  © Copyright 2016, Denise Irvin. -->